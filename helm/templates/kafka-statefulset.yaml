apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
spec:
  serviceName: kafka-headless
  replicas: {{ .Values.kafka.replicas }}
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: kafka
                topologyKey: "kubernetes.io/hostname"
      containers:
      - name: kafka
        image: '{{ .Values.kafka.image }}'
        ports:
        - containerPort: 9092
          name: kafka-port
        env:
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: '{{ .Values.kafka.zookeeperConnect }}'
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: 'PLAINTEXT:PLAINTEXT'
        - name: KAFKA_LISTENERS
          value: 'PLAINTEXT://:9092'
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: 'true'
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: '{{ .Values.kafka.offsetsTopicReplicationFactor }}'
        - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
          value: '{{ .Values.kafka.transactionStateLogReplicationFactor }}'
        - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
          value: '{{ .Values.kafka.transactionStateLogMinISR }}'
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        command:
        - sh
        - -c
        - |
          export KAFKA_BROKER_ID=$(hostname | awk -F'-' '{print $NF}');
          export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-${KAFKA_BROKER_ID}.kafka-headless.${NAMESPACE}.svc.cluster.local:9092;
          /etc/confluent/docker/run
